// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.0.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace IntegrationTestingLibraryForSqlServer.IntegrationTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class DatabaseFeature : Xunit.IClassFixture<DatabaseFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Database.feature"
#line hidden
        
        public DatabaseFeature(DatabaseFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Database", "\tDatabase setup and tear down functions", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Grant Domain user access")]
        [Xunit.TraitAttribute("FeatureTitle", "Database")]
        [Xunit.TraitAttribute("Description", "Grant Domain user access")]
        [Xunit.TraitAttribute("Category", "db")]
        public virtual void GrantDomainUserAccess()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Grant Domain user access", new string[] {
                        "db"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("there is a test database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.When("the domain user \'Administrator\' is granted access to the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Permission"});
            table1.AddRow(new string[] {
                        "CONNECT"});
            table1.AddRow(new string[] {
                        "SELECT"});
            table1.AddRow(new string[] {
                        "INSERT"});
            table1.AddRow(new string[] {
                        "UPDATE"});
            table1.AddRow(new string[] {
                        "DELETE"});
            table1.AddRow(new string[] {
                        "EXECUTE"});
            table1.AddRow(new string[] {
                        "VIEW ANY COLUMN ENCRYPTION KEY DEFINITION"});
            table1.AddRow(new string[] {
                        "VIEW ANY COLUMN MASTER KEY DEFINITION"});
#line 8
 testRunner.Then("the permissions should be", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Grant SQL user access")]
        [Xunit.TraitAttribute("FeatureTitle", "Database")]
        [Xunit.TraitAttribute("Description", "Grant SQL user access")]
        [Xunit.TraitAttribute("Category", "db")]
        public virtual void GrantSQLUserAccess()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Grant SQL user access", new string[] {
                        "db"});
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("there is a test database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
 testRunner.When("the SQL user \'testaccount\' with password \'abc123\' is granted access to the databa" +
                    "se", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Permission"});
            table2.AddRow(new string[] {
                        "CONNECT"});
            table2.AddRow(new string[] {
                        "SELECT"});
            table2.AddRow(new string[] {
                        "INSERT"});
            table2.AddRow(new string[] {
                        "UPDATE"});
            table2.AddRow(new string[] {
                        "DELETE"});
            table2.AddRow(new string[] {
                        "EXECUTE"});
            table2.AddRow(new string[] {
                        "VIEW ANY COLUMN ENCRYPTION KEY DEFINITION"});
            table2.AddRow(new string[] {
                        "VIEW ANY COLUMN MASTER KEY DEFINITION"});
#line 23
 testRunner.Then("the permissions should be", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                DatabaseFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                DatabaseFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
