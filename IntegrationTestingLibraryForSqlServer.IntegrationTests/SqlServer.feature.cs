// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace IntegrationTestingLibraryForSqlServer.IntegrationTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SqlServerFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SqlServer.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SqlServer", "\tEnsure we understand how SQL Server works", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "SqlServer")))
            {
                IntegrationTestingLibraryForSqlServer.IntegrationTests.SqlServerFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Default sizes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlServer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("db")]
        public virtual void DefaultSizes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Default sizes", new string[] {
                        "db"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("there is a test database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Data Type",
                        "Size",
                        "Decimal Places",
                        "Allow Nulls"});
            table1.AddRow(new string[] {
                        "C01",
                        "BigInt",
                        "",
                        "",
                        "true"});
            table1.AddRow(new string[] {
                        "C02",
                        "Binary",
                        "",
                        "",
                        "true"});
            table1.AddRow(new string[] {
                        "C03",
                        "Bit",
                        "",
                        "",
                        "true"});
            table1.AddRow(new string[] {
                        "C04",
                        "Char",
                        "",
                        "",
                        "true"});
            table1.AddRow(new string[] {
                        "C05",
                        "DateTime",
                        "",
                        "",
                        "true"});
            table1.AddRow(new string[] {
                        "C06",
                        "Decimal",
                        "",
                        "",
                        "true"});
            table1.AddRow(new string[] {
                        "C07",
                        "Float",
                        "",
                        "",
                        "true"});
            table1.AddRow(new string[] {
                        "C08",
                        "Image",
                        "",
                        "",
                        "true"});
            table1.AddRow(new string[] {
                        "C09",
                        "Int",
                        "",
                        "",
                        "true"});
            table1.AddRow(new string[] {
                        "C10",
                        "Money",
                        "",
                        "",
                        "true"});
            table1.AddRow(new string[] {
                        "C11",
                        "NChar",
                        "",
                        "",
                        "true"});
            table1.AddRow(new string[] {
                        "C12",
                        "NText",
                        "",
                        "",
                        "true"});
            table1.AddRow(new string[] {
                        "C13",
                        "NVarChar",
                        "",
                        "",
                        "true"});
            table1.AddRow(new string[] {
                        "C14",
                        "Real",
                        "",
                        "",
                        "true"});
            table1.AddRow(new string[] {
                        "C15",
                        "UniqueIdentifier",
                        "",
                        "",
                        "true"});
            table1.AddRow(new string[] {
                        "C16",
                        "SmallDateTime",
                        "",
                        "",
                        "true"});
            table1.AddRow(new string[] {
                        "C17",
                        "SmallInt",
                        "",
                        "",
                        "true"});
            table1.AddRow(new string[] {
                        "C18",
                        "SmallMoney",
                        "",
                        "",
                        "true"});
            table1.AddRow(new string[] {
                        "C19",
                        "Text",
                        "",
                        "",
                        "true"});
            table1.AddRow(new string[] {
                        "C20",
                        "Timestamp",
                        "",
                        "",
                        "true"});
            table1.AddRow(new string[] {
                        "C21",
                        "TinyInt",
                        "",
                        "",
                        "true"});
            table1.AddRow(new string[] {
                        "C22",
                        "VarBinary",
                        "",
                        "",
                        "true"});
            table1.AddRow(new string[] {
                        "C23",
                        "VarChar",
                        "",
                        "",
                        "true"});
            table1.AddRow(new string[] {
                        "C25",
                        "Xml",
                        "",
                        "",
                        "true"});
            table1.AddRow(new string[] {
                        "C28",
                        "Date",
                        "",
                        "",
                        "true"});
            table1.AddRow(new string[] {
                        "C29",
                        "Time",
                        "",
                        "",
                        "true"});
            table1.AddRow(new string[] {
                        "C30",
                        "DateTime2",
                        "",
                        "",
                        "true"});
            table1.AddRow(new string[] {
                        "C31",
                        "DateTimeOffset",
                        "",
                        "",
                        "true"});
#line 7
 testRunner.When("the table \"test\" is created", ((string)(null)), table1, "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Data Type",
                        "Size",
                        "Decimal Places",
                        "Allow Nulls"});
            table2.AddRow(new string[] {
                        "C01",
                        "BigInt",
                        "",
                        "",
                        "true"});
            table2.AddRow(new string[] {
                        "C02",
                        "Binary",
                        "",
                        "",
                        "true"});
            table2.AddRow(new string[] {
                        "C03",
                        "Bit",
                        "",
                        "",
                        "true"});
            table2.AddRow(new string[] {
                        "C04",
                        "Char",
                        "",
                        "",
                        "true"});
            table2.AddRow(new string[] {
                        "C05",
                        "DateTime",
                        "",
                        "",
                        "true"});
            table2.AddRow(new string[] {
                        "C06",
                        "Decimal",
                        "",
                        "",
                        "true"});
            table2.AddRow(new string[] {
                        "C07",
                        "Float",
                        "",
                        "",
                        "true"});
            table2.AddRow(new string[] {
                        "C08",
                        "Image",
                        "",
                        "",
                        "true"});
            table2.AddRow(new string[] {
                        "C09",
                        "Int",
                        "",
                        "",
                        "true"});
            table2.AddRow(new string[] {
                        "C10",
                        "Money",
                        "",
                        "",
                        "true"});
            table2.AddRow(new string[] {
                        "C11",
                        "NChar",
                        "",
                        "",
                        "true"});
            table2.AddRow(new string[] {
                        "C12",
                        "NText",
                        "",
                        "",
                        "true"});
            table2.AddRow(new string[] {
                        "C13",
                        "NVarChar",
                        "",
                        "",
                        "true"});
            table2.AddRow(new string[] {
                        "C14",
                        "Real",
                        "",
                        "",
                        "true"});
            table2.AddRow(new string[] {
                        "C15",
                        "UniqueIdentifier",
                        "",
                        "",
                        "true"});
            table2.AddRow(new string[] {
                        "C16",
                        "SmallDateTime",
                        "",
                        "",
                        "true"});
            table2.AddRow(new string[] {
                        "C17",
                        "SmallInt",
                        "",
                        "",
                        "true"});
            table2.AddRow(new string[] {
                        "C18",
                        "SmallMoney",
                        "",
                        "",
                        "true"});
            table2.AddRow(new string[] {
                        "C19",
                        "Text",
                        "",
                        "",
                        "true"});
            table2.AddRow(new string[] {
                        "C20",
                        "Timestamp",
                        "",
                        "",
                        "true"});
            table2.AddRow(new string[] {
                        "C21",
                        "TinyInt",
                        "",
                        "",
                        "true"});
            table2.AddRow(new string[] {
                        "C22",
                        "VarBinary",
                        "",
                        "",
                        "true"});
            table2.AddRow(new string[] {
                        "C23",
                        "VarChar",
                        "",
                        "",
                        "true"});
            table2.AddRow(new string[] {
                        "C25",
                        "Xml",
                        "",
                        "",
                        "true"});
            table2.AddRow(new string[] {
                        "C28",
                        "Date",
                        "",
                        "",
                        "true"});
            table2.AddRow(new string[] {
                        "C29",
                        "Time",
                        "",
                        "",
                        "true"});
            table2.AddRow(new string[] {
                        "C30",
                        "DateTime2",
                        "",
                        "",
                        "true"});
            table2.AddRow(new string[] {
                        "C31",
                        "DateTimeOffset",
                        "",
                        "",
                        "true"});
#line 37
 testRunner.Then("the definition of table \"test\" should match", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Default maximum sizes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SqlServer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("db")]
        public virtual void DefaultMaximumSizes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Default maximum sizes", new string[] {
                        "db"});
#line 69
this.ScenarioSetup(scenarioInfo);
#line 70
 testRunner.Given("there is a test database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Data Type",
                        "Size",
                        "Decimal Places",
                        "Allow Nulls"});
            table3.AddRow(new string[] {
                        "C13",
                        "NVarChar",
                        "0",
                        "",
                        "true"});
            table3.AddRow(new string[] {
                        "C22",
                        "VarBinary",
                        "0",
                        "",
                        "true"});
            table3.AddRow(new string[] {
                        "C23",
                        "VarChar",
                        "0",
                        "",
                        "true"});
#line 71
 testRunner.When("the table \"test\" is created", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Data Type",
                        "Size",
                        "Decimal Places",
                        "Allow Nulls"});
            table4.AddRow(new string[] {
                        "C13",
                        "NVarChar",
                        "0",
                        "",
                        "true"});
            table4.AddRow(new string[] {
                        "C22",
                        "VarBinary",
                        "0",
                        "",
                        "true"});
            table4.AddRow(new string[] {
                        "C23",
                        "VarChar",
                        "0",
                        "",
                        "true"});
#line 76
 testRunner.Then("the definition of table \"test\" should match", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
