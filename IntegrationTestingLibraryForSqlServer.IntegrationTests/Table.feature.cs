// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace IntegrationTestingLibraryForSqlServer.IntegrationTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class TableFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Table.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Table", "Table setup and populate functions", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Table")))
            {
                IntegrationTestingLibraryForSqlServer.IntegrationTests.TableFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Table setup and verify")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("db")]
        public virtual void TableSetupAndVerify()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Table setup and verify", new string[] {
                        "db"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("there is a test database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Data Type",
                        "Size",
                        "Precision",
                        "Allow Nulls",
                        "Identity Seed"});
            table1.AddRow(new string[] {
                        "Id",
                        "int",
                        "",
                        "",
                        "false",
                        "4"});
            table1.AddRow(new string[] {
                        "Name",
                        "nvarchar",
                        "50",
                        "",
                        "true",
                        ""});
#line 7
 testRunner.When("the table \"test\" is created", ((string)(null)), table1, "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Data Type",
                        "Size",
                        "Precision",
                        "Allow Nulls",
                        "Identity Seed"});
            table2.AddRow(new string[] {
                        "Id",
                        "int",
                        "",
                        "",
                        "false",
                        "4"});
            table2.AddRow(new string[] {
                        "Name",
                        "nvarchar",
                        "50",
                        "",
                        "true",
                        ""});
#line 11
 testRunner.Then("the definition of table \"test\" should match", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Table setup and verify subset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("db")]
        public virtual void TableSetupAndVerifySubset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Table setup and verify subset", new string[] {
                        "db"});
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given("there is a test database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Data Type",
                        "Size",
                        "Precision",
                        "Allow Nulls",
                        "Identity Seed"});
            table3.AddRow(new string[] {
                        "Id",
                        "int",
                        "",
                        "",
                        "false",
                        "4"});
            table3.AddRow(new string[] {
                        "Name",
                        "nvarchar",
                        "50",
                        "",
                        "true",
                        ""});
            table3.AddRow(new string[] {
                        "NewColumn",
                        "int",
                        "",
                        "",
                        "true",
                        ""});
#line 19
 testRunner.When("the table \"test\" is created", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Data Type",
                        "Size",
                        "Precision",
                        "Allow Nulls",
                        "Identity Seed"});
            table4.AddRow(new string[] {
                        "Id",
                        "int",
                        "",
                        "",
                        "false",
                        "4"});
            table4.AddRow(new string[] {
                        "Name",
                        "nvarchar",
                        "50",
                        "",
                        "true",
                        ""});
#line 24
 testRunner.Then("the definition of table \"test\" should contain", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Table populate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("db")]
        public virtual void TablePopulate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Table populate", new string[] {
                        "db"});
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given("there is a test database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Data Type",
                        "Size",
                        "Precision",
                        "Allow Nulls"});
            table5.AddRow(new string[] {
                        "Id",
                        "int",
                        "",
                        "",
                        "false"});
            table5.AddRow(new string[] {
                        "Name",
                        "nvarchar",
                        "50",
                        "",
                        "true"});
#line 32
 testRunner.And("the table \"test\" is created", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name"});
            table6.AddRow(new string[] {
                        "1",
                        "First"});
            table6.AddRow(new string[] {
                        "2",
                        "Second"});
#line 36
 testRunner.When("table \"test\" is populated", ((string)(null)), table6, "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name"});
            table7.AddRow(new string[] {
                        "1",
                        "First"});
            table7.AddRow(new string[] {
                        "2",
                        "Second"});
#line 40
 testRunner.Then("the table \"test\" should be populated with data", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Table populate with identity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("db")]
        public virtual void TablePopulateWithIdentity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Table populate with identity", new string[] {
                        "db"});
#line 46
this.ScenarioSetup(scenarioInfo);
#line 47
 testRunner.Given("there is a test database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Data Type",
                        "Size",
                        "Precision",
                        "Allow Nulls",
                        "Identity Seed"});
            table8.AddRow(new string[] {
                        "Id",
                        "int",
                        "",
                        "",
                        "false",
                        "5"});
            table8.AddRow(new string[] {
                        "Name",
                        "nvarchar",
                        "50",
                        "",
                        "true",
                        ""});
#line 48
 testRunner.And("the table \"test\" is created", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table9.AddRow(new string[] {
                        "First"});
            table9.AddRow(new string[] {
                        "Second"});
#line 52
 testRunner.When("table \"test\" is populated", ((string)(null)), table9, "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name"});
            table10.AddRow(new string[] {
                        "5",
                        "First"});
            table10.AddRow(new string[] {
                        "6",
                        "Second"});
#line 56
 testRunner.Then("the table \"test\" should be populated with data", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create a view based on a table")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("db")]
        public virtual void CreateAViewBasedOnATable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a view based on a table", new string[] {
                        "db"});
#line 62
this.ScenarioSetup(scenarioInfo);
#line 63
 testRunner.Given("there is a test database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Data Type",
                        "Size",
                        "Precision",
                        "Allow Nulls"});
            table11.AddRow(new string[] {
                        "Id",
                        "int",
                        "",
                        "",
                        "false"});
            table11.AddRow(new string[] {
                        "Name",
                        "nvarchar",
                        "50",
                        "",
                        "true"});
#line 64
 testRunner.And("the table \"test\" is created", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name"});
            table12.AddRow(new string[] {
                        "1",
                        "First"});
            table12.AddRow(new string[] {
                        "2",
                        "Second"});
#line 68
 testRunner.And("table \"test\" is populated", ((string)(null)), table12, "And ");
#line 72
 testRunner.When("a view called \"testview\" of the table \"test\" is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name"});
            table13.AddRow(new string[] {
                        "2",
                        "Second"});
#line 73
 testRunner.Then("the view \"testview\" filtered to id 2 should be populated with data", ((string)(null)), table13, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create a view based on a table in a schema")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("db")]
        public virtual void CreateAViewBasedOnATableInASchema()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a view based on a table in a schema", new string[] {
                        "db"});
#line 78
this.ScenarioSetup(scenarioInfo);
#line 79
 testRunner.Given("there is a test database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 80
 testRunner.And("the schema \"testSchema\" is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Data Type",
                        "Size",
                        "Precision",
                        "Allow Nulls"});
            table14.AddRow(new string[] {
                        "Id",
                        "int",
                        "",
                        "",
                        "false"});
            table14.AddRow(new string[] {
                        "Name",
                        "nvarchar",
                        "50",
                        "",
                        "true"});
#line 81
 testRunner.And("the table \"testTable\" is created in the schema \"testSchema\"", ((string)(null)), table14, "And ");
#line 85
 testRunner.When("the view \"testView\" of the table \"testTable\" is created in the schema \"testSchema" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 86
 testRunner.Then("the table \"testTable\" exists in the schema \"testSchema\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Schema creation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("db")]
        public virtual void SchemaCreation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Schema creation", new string[] {
                        "db"});
#line 89
this.ScenarioSetup(scenarioInfo);
#line 90
 testRunner.Given("there is a test database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 91
 testRunner.When("the schema \"testSchema\" is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 92
 testRunner.Then("the schema \"testSchema\" exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Schema and table creation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("db")]
        public virtual void SchemaAndTableCreation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Schema and table creation", new string[] {
                        "db"});
#line 95
this.ScenarioSetup(scenarioInfo);
#line 96
 testRunner.Given("there is a test database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 97
 testRunner.When("the schema \"testSchema\" is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Data Type",
                        "Size",
                        "Precision",
                        "Allow Nulls"});
            table15.AddRow(new string[] {
                        "Id",
                        "int",
                        "",
                        "",
                        "false"});
            table15.AddRow(new string[] {
                        "Name",
                        "nvarchar",
                        "50",
                        "",
                        "true"});
#line 98
 testRunner.And("the table \"testTable\" is created in schema \"testSchema\"", ((string)(null)), table15, "And ");
#line 102
 testRunner.Then("the table \"testTable\" exists in the schema \"testSchema\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
