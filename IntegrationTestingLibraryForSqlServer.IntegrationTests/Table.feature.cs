// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace IntegrationTestingLibraryForSqlServer.IntegrationTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class TableFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Table.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Table", "\tTable setup and populate functions", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Table")))
            {
                IntegrationTestingLibraryForSqlServer.IntegrationTests.TableFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Table setup and verify")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("db")]
        public virtual void TableSetupAndVerify()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Table setup and verify", new string[] {
                        "db"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("there is a test database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Data Type",
                        "Size",
                        "Decimal Places",
                        "Allow Nulls",
                        "Identity Seed"});
            table1.AddRow(new string[] {
                        "Id",
                        "int",
                        "",
                        "",
                        "false",
                        "4"});
            table1.AddRow(new string[] {
                        "Name",
                        "nvarchar",
                        "50",
                        "",
                        "true",
                        ""});
#line 7
 testRunner.When("the table \"test\" is created", ((string)(null)), table1, "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Data Type",
                        "Size",
                        "Decimal Places",
                        "Allow Nulls",
                        "Identity Seed"});
            table2.AddRow(new string[] {
                        "Id",
                        "int",
                        "",
                        "",
                        "false",
                        "4"});
            table2.AddRow(new string[] {
                        "Name",
                        "nvarchar",
                        "50",
                        "",
                        "true",
                        ""});
#line 11
 testRunner.Then("the definition of table \"test\" should match", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Table setup and verify with numeric column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("db")]
        public virtual void TableSetupAndVerifyWithNumericColumn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Table setup and verify with numeric column", new string[] {
                        "db"});
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given("there is a test database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Data Type",
                        "Size",
                        "Decimal Places",
                        "Allow Nulls",
                        "Identity Seed"});
            table3.AddRow(new string[] {
                        "Decimal1",
                        "decimal",
                        "10",
                        "5",
                        "true",
                        ""});
            table3.AddRow(new string[] {
                        "Decimal2",
                        "decimal",
                        "",
                        "",
                        "true",
                        ""});
            table3.AddRow(new string[] {
                        "Decimal3",
                        "decimal",
                        "28",
                        "1",
                        "false",
                        ""});
            table3.AddRow(new string[] {
                        "Decimal4",
                        "decimal",
                        "10",
                        "2",
                        "true",
                        ""});
            table3.AddRow(new string[] {
                        "Decimal5",
                        "decimal",
                        "11",
                        "",
                        "true",
                        ""});
            table3.AddRow(new string[] {
                        "Id",
                        "int",
                        "",
                        "",
                        "false",
                        "true"});
            table3.AddRow(new string[] {
                        "Name",
                        "nvarchar",
                        "50",
                        "",
                        "true",
                        ""});
#line 19
 testRunner.When("the table \"test\" is created with a numeric column", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Data Type",
                        "Size",
                        "Decimal Places",
                        "Allow Nulls",
                        "Identity Seed"});
            table4.AddRow(new string[] {
                        "Decimal1",
                        "decimal",
                        "10",
                        "5",
                        "true",
                        ""});
            table4.AddRow(new string[] {
                        "Decimal2",
                        "decimal",
                        "18",
                        "0",
                        "true",
                        ""});
            table4.AddRow(new string[] {
                        "Decimal3",
                        "decimal",
                        "28",
                        "1",
                        "false",
                        ""});
            table4.AddRow(new string[] {
                        "Decimal4",
                        "decimal",
                        "10",
                        "2",
                        "true",
                        ""});
            table4.AddRow(new string[] {
                        "Decimal5",
                        "decimal",
                        "11",
                        "0",
                        "true",
                        ""});
            table4.AddRow(new string[] {
                        "Id",
                        "int",
                        "",
                        "",
                        "false",
                        "true"});
            table4.AddRow(new string[] {
                        "Name",
                        "nvarchar",
                        "50",
                        "",
                        "true",
                        ""});
#line 28
 testRunner.Then("the definition of table \"test\" should match", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Table setup - decimal places set without size")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("db")]
        public virtual void TableSetup_DecimalPlacesSetWithoutSize()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Table setup - decimal places set without size", new string[] {
                        "db"});
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
 testRunner.Given("there is a test database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Data Type",
                        "Size",
                        "Decimal Places"});
            table5.AddRow(new string[] {
                        "Decimal4",
                        "decimal",
                        "",
                        "2"});
#line 41
 testRunner.Then("an attempt to create the table \"test\" with an invalid definition should fail", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Table setup - decimal places greater than size")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("db")]
        public virtual void TableSetup_DecimalPlacesGreaterThanSize()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Table setup - decimal places greater than size", new string[] {
                        "db"});
#line 46
this.ScenarioSetup(scenarioInfo);
#line 47
 testRunner.Given("there is a test database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Data Type",
                        "Size",
                        "Decimal Places"});
            table6.AddRow(new string[] {
                        "Decimal4",
                        "decimal",
                        "10",
                        "11"});
#line 48
 testRunner.Then("an attempt to create the table \"test\" with an invalid definition should fail", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Table setup and verify subset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("db")]
        public virtual void TableSetupAndVerifySubset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Table setup and verify subset", new string[] {
                        "db"});
#line 53
this.ScenarioSetup(scenarioInfo);
#line 54
 testRunner.Given("there is a test database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Data Type",
                        "Size",
                        "Decimal Places",
                        "Allow Nulls",
                        "Identity Seed"});
            table7.AddRow(new string[] {
                        "Id",
                        "int",
                        "",
                        "",
                        "false",
                        "4"});
            table7.AddRow(new string[] {
                        "Name",
                        "nvarchar",
                        "50",
                        "",
                        "true",
                        ""});
            table7.AddRow(new string[] {
                        "NewColumn",
                        "int",
                        "",
                        "",
                        "true",
                        ""});
#line 55
 testRunner.When("the table \"test\" is created", ((string)(null)), table7, "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Data Type",
                        "Size",
                        "Decimal Places",
                        "Allow Nulls",
                        "Identity Seed"});
            table8.AddRow(new string[] {
                        "Id",
                        "int",
                        "",
                        "",
                        "false",
                        "4"});
            table8.AddRow(new string[] {
                        "Name",
                        "nvarchar",
                        "50",
                        "",
                        "true",
                        ""});
#line 60
 testRunner.Then("the definition of table \"test\" should contain", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Table populate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("db")]
        public virtual void TablePopulate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Table populate", new string[] {
                        "db"});
#line 66
this.ScenarioSetup(scenarioInfo);
#line 67
 testRunner.Given("there is a test database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Data Type",
                        "Size",
                        "Decimal Places",
                        "Allow Nulls"});
            table9.AddRow(new string[] {
                        "Id",
                        "int",
                        "",
                        "",
                        "false"});
            table9.AddRow(new string[] {
                        "Name",
                        "nvarchar",
                        "50",
                        "",
                        "false"});
            table9.AddRow(new string[] {
                        "Uid",
                        "uniqueidentifier",
                        "",
                        "",
                        "false"});
            table9.AddRow(new string[] {
                        "Flag",
                        "bit",
                        "",
                        "",
                        "false"});
            table9.AddRow(new string[] {
                        "UpdateDate",
                        "datetime",
                        "",
                        "",
                        "false"});
            table9.AddRow(new string[] {
                        "FloatingNumber",
                        "decimal",
                        "6",
                        "2",
                        "false"});
            table9.AddRow(new string[] {
                        "WholeNumber",
                        "int",
                        "",
                        "",
                        "false"});
#line 68
 testRunner.And("the table \"test\" is created", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Uid",
                        "Flag",
                        "UpdateDate",
                        "FloatingNumber",
                        "WholeNumber"});
            table10.AddRow(new string[] {
                        "1",
                        "First",
                        "{15B42E6F-16D5-4DCB-B202-C9D24F20FD6A}",
                        "True",
                        "2010-01-01",
                        "1234.50",
                        "02"});
#line 77
 testRunner.When("table \"test\" is populated", ((string)(null)), table10, "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Uid",
                        "Flag",
                        "UpdateDate",
                        "FloatingNumber",
                        "WholeNumber"});
            table11.AddRow(new string[] {
                        "1",
                        "First",
                        "15B42E6F-16D5-4DCB-B202-C9D24F20FD6A",
                        "true",
                        "2010-1-1",
                        "1234.5",
                        "2"});
#line 80
 testRunner.Then("the table \"test\" should be populated with data", ((string)(null)), table11, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Table populate with identity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("db")]
        public virtual void TablePopulateWithIdentity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Table populate with identity", new string[] {
                        "db"});
#line 85
this.ScenarioSetup(scenarioInfo);
#line 86
 testRunner.Given("there is a test database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Data Type",
                        "Size",
                        "Decimal Places",
                        "Allow Nulls",
                        "Identity Seed"});
            table12.AddRow(new string[] {
                        "Id",
                        "int",
                        "",
                        "",
                        "false",
                        "5"});
            table12.AddRow(new string[] {
                        "Name",
                        "nvarchar",
                        "50",
                        "",
                        "true",
                        ""});
#line 87
 testRunner.And("the table \"test\" is created", ((string)(null)), table12, "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table13.AddRow(new string[] {
                        "First"});
            table13.AddRow(new string[] {
                        "Second"});
#line 91
 testRunner.When("table \"test\" is populated", ((string)(null)), table13, "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name"});
            table14.AddRow(new string[] {
                        "5",
                        "First"});
            table14.AddRow(new string[] {
                        "6",
                        "Second"});
#line 95
 testRunner.Then("the table \"test\" should be populated with data", ((string)(null)), table14, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Table populate with null")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("db")]
        public virtual void TablePopulateWithNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Table populate with null", new string[] {
                        "db"});
#line 101
this.ScenarioSetup(scenarioInfo);
#line 102
 testRunner.Given("there is a test database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Data Type",
                        "Size",
                        "Decimal Places",
                        "Allow Nulls",
                        "Identity Seed"});
            table15.AddRow(new string[] {
                        "Id",
                        "int",
                        "",
                        "",
                        "false",
                        "70"});
            table15.AddRow(new string[] {
                        "Date",
                        "DateTime",
                        "",
                        "",
                        "true",
                        ""});
#line 103
 testRunner.And("the table \"test\" is created", ((string)(null)), table15, "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date"});
            table16.AddRow(new string[] {
                        "2015-10-10"});
            table16.AddRow(new string[] {
                        "NULL"});
#line 107
 testRunner.When("table \"test\" is populated supporting Null values", ((string)(null)), table16, "When ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Date"});
            table17.AddRow(new string[] {
                        "70",
                        "2015-10-10"});
            table17.AddRow(new string[] {
                        "71",
                        "NULL"});
#line 111
 testRunner.Then("the table \"test\" should be populated with Id and dates", ((string)(null)), table17, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create a view based on a table")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("db")]
        public virtual void CreateAViewBasedOnATable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a view based on a table", new string[] {
                        "db"});
#line 117
this.ScenarioSetup(scenarioInfo);
#line 118
 testRunner.Given("there is a test database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Data Type",
                        "Size",
                        "Decimal Places",
                        "Allow Nulls"});
            table18.AddRow(new string[] {
                        "Id",
                        "int",
                        "",
                        "",
                        "false"});
            table18.AddRow(new string[] {
                        "Name",
                        "nvarchar",
                        "50",
                        "",
                        "true"});
#line 119
 testRunner.And("the table \"test\" is created", ((string)(null)), table18, "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name"});
            table19.AddRow(new string[] {
                        "1",
                        "First"});
            table19.AddRow(new string[] {
                        "2",
                        "Second"});
#line 123
 testRunner.And("table \"test\" is populated", ((string)(null)), table19, "And ");
#line 127
 testRunner.When("a view called \"testview\" of the table \"test\" is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name"});
            table20.AddRow(new string[] {
                        "2",
                        "Second"});
#line 128
 testRunner.Then("the view \"testview\" filtered to id 2 should be populated with data", ((string)(null)), table20, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create a view based on a table in a schema")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("db")]
        public virtual void CreateAViewBasedOnATableInASchema()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a view based on a table in a schema", new string[] {
                        "db"});
#line 133
this.ScenarioSetup(scenarioInfo);
#line 134
 testRunner.Given("there is a test database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 135
 testRunner.And("the schema \"testSchema\" is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Data Type",
                        "Size",
                        "Decimal Places",
                        "Allow Nulls"});
            table21.AddRow(new string[] {
                        "Id",
                        "int",
                        "",
                        "",
                        "false"});
            table21.AddRow(new string[] {
                        "Name",
                        "nvarchar",
                        "50",
                        "",
                        "true"});
#line 136
 testRunner.And("the table \"testTable\" is created in the schema \"testSchema\"", ((string)(null)), table21, "And ");
#line 140
 testRunner.When("the view \"testView\" of the table \"testTable\" is created in the schema \"testSchema" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 141
 testRunner.Then("the table \"testTable\" exists in the schema \"testSchema\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Schema creation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("db")]
        public virtual void SchemaCreation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Schema creation", new string[] {
                        "db"});
#line 144
this.ScenarioSetup(scenarioInfo);
#line 145
 testRunner.Given("there is a test database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 146
 testRunner.When("the schema \"testSchema\" is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 147
 testRunner.Then("the schema \"testSchema\" exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Schema and table creation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Table")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("db")]
        public virtual void SchemaAndTableCreation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Schema and table creation", new string[] {
                        "db"});
#line 150
this.ScenarioSetup(scenarioInfo);
#line 151
 testRunner.Given("there is a test database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 152
 testRunner.When("the schema \"testSchema\" is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Data Type",
                        "Size",
                        "Decimal Places",
                        "Allow Nulls"});
            table22.AddRow(new string[] {
                        "Id",
                        "int",
                        "",
                        "",
                        "false"});
            table22.AddRow(new string[] {
                        "Name",
                        "nvarchar",
                        "50",
                        "",
                        "true"});
#line 153
 testRunner.And("the table \"testTable\" is created in schema \"testSchema\"", ((string)(null)), table22, "And ");
#line 157
 testRunner.Then("the table \"testTable\" exists in the schema \"testSchema\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
